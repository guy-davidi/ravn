/* SPDX-License-Identifier: GPL-2.0 */
/*
 * eBPF Vulnerability Program Interface
 * 
 * This file defines the interface for the eBPF vulnerability program that monitors
 * vulnerability-related events, exploit attempts, and security weaknesses.
 *
 * Author: ravn Security Team
 * Date: 2025
 */

#ifndef _ravn_CORE_VULNERABILITY_IF_H
#define _ravn_CORE_VULNERABILITY_IF_H

#include <stdint.h>

/**
 * Vulnerability event types
 */
enum core_vulnerability_event_type {
	CORE_VULNERABILITY_EVENT_VULNERABLE_SOFTWARE = 1,
	CORE_VULNERABILITY_EVENT_CONFIG_CHANGE = 2,
	CORE_VULNERABILITY_EVENT_PERMISSION_CHANGE = 3,
	CORE_VULNERABILITY_EVENT_NETWORK_SERVICE = 4,
	CORE_VULNERABILITY_EVENT_KERNEL_MODULE = 5,
	CORE_VULNERABILITY_EVENT_SYSCALL_VULNERABILITY = 6,
	CORE_VULNERABILITY_EVENT_MEMORY_VULNERABILITY = 7,
	CORE_VULNERABILITY_EVENT_FILE_VULNERABILITY = 8,
	CORE_VULNERABILITY_EVENT_NETWORK_VULNERABILITY = 9,
};

/**
 * Vulnerability severity levels
 */
enum core_vulnerability_severity {
	CORE_VULNERABILITY_SEVERITY_LOW = 1,
	CORE_VULNERABILITY_SEVERITY_MEDIUM = 2,
	CORE_VULNERABILITY_SEVERITY_HIGH = 3,
	CORE_VULNERABILITY_SEVERITY_CRITICAL = 4,
};

/**
 * struct core_vulnerability_event - Vulnerability event structure
 * @timestamp_ns: Event timestamp in nanoseconds
 * @event_type: Type of vulnerability event
 * @severity: Event severity level
 * @pid: Process ID
 * @tgid: Thread group ID
 * @uid: User ID
 * @gid: Group ID
 * @comm: Process command name
 * @process_path: Full path to process
 * @cve_id: CVE identifier
 * @vulnerability_name: Name of the vulnerability
 * @affected_component: Affected system component
 * @exploit_available: Whether exploit is available
 * @patch_available: Whether patch is available
 * @risk_score: Risk score (0-100)
 * @filename: Associated filename
 * @file_inode: File inode number
 * @file_mode: File mode
 * @file_size: File size in bytes
 * @src_ip: Source IP address
 * @dst_ip: Destination IP address
 * @src_port: Source port
 * @dst_port: Destination port
 * @protocol: Network protocol
 * @command_line: Command line arguments
 * @parent_pid: Parent process ID
 * @session_id: Session ID
 * @confidence_score: Confidence score (0-100)
 */
struct core_vulnerability_event {
	uint64_t timestamp_ns;
	uint32_t event_type;
	uint32_t severity;
	uint32_t pid;
	uint32_t tgid;
	uint32_t uid;
	uint32_t gid;
	char comm[16];
	char process_path[256];
	char cve_id[32];
	char vulnerability_name[128];
	char affected_component[128];
	uint32_t exploit_available;
	uint32_t patch_available;
	uint32_t risk_score;
	char filename[256];
	uint32_t file_inode;
	uint32_t file_mode;
	uint64_t file_size;
	uint32_t src_ip;
	uint32_t dst_ip;
	uint16_t src_port;
	uint16_t dst_port;
	uint8_t protocol;
	char command_line[512];
	uint32_t parent_pid;
	uint32_t session_id;
	uint32_t confidence_score;
};

/**
 * Core vulnerability program configuration
 */
struct core_vulnerability_config {
	int monitor_vulnerable_software;
	int monitor_config_changes;
	int monitor_permission_changes;
	int monitor_network_services;
	int monitor_kernel_modules;
	int monitor_syscall_vulnerabilities;
	int monitor_memory_vulnerabilities;
	int monitor_file_vulnerabilities;
	int monitor_network_vulnerabilities;
	uint32_t risk_threshold;
	uint32_t confidence_threshold;
};

/**
 * core_vulnerability_program_load() - Load vulnerability eBPF program
 * @config: Program configuration
 *
 * Load the vulnerability eBPF program with the given configuration.
 *
 * Return: 0 on success, negative error code on failure
 */
int core_vulnerability_program_load(const struct core_vulnerability_config *config);

/**
 * core_vulnerability_program_attach() - Attach vulnerability eBPF program
 *
 * Attach the vulnerability eBPF program to kernel tracepoints.
 *
 * Return: 0 on success, negative error code on failure
 */
int core_vulnerability_program_attach(void);

/**
 * core_vulnerability_program_detach() - Detach vulnerability eBPF program
 *
 * Detach the vulnerability eBPF program from kernel tracepoints.
 *
 * Return: 0 on success, negative error code on failure
 */
int core_vulnerability_program_detach(void);

/**
 * core_vulnerability_get_ring_buffer() - Get vulnerability ring buffer
 *
 * Get the ring buffer for vulnerability events.
 *
 * Return: Pointer to ring buffer on success, NULL on failure
 */
void *core_vulnerability_get_ring_buffer(void);

#endif /* _ravn_CORE_VULNERABILITY_IF_H */
